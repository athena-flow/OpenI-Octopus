package e2e

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	vkv1 "scheduler/pkg/crd/apis/taskset/v1alpha1"
)

var _ = Describe("Pytorch E2E Test", func() {
	It("Will Start in pending state and goes through other phases to get complete phase", func() {
		context := initTestContext(TestNameSpace)
		defer cleanupTestContext(context)

		jobName := "pytorchdistml"

		job := &vkv1.TaskSet{
			ObjectMeta: metav1.ObjectMeta{
				Name:      jobName,
				Namespace: TestNameSpace,
			},
			Spec: vkv1.TaskSetSpec{
				Queue: DefaultQueue,
				Scheduler: vkv1.SchedulerSetting{
					Name: SchedulerName,
					Policies: []vkv1.SchedulerPolicy{
						{
							Name:   "gang",
							Policy: "[{\"role\":\"ps\",\"minAvailable\":1},{\"role\":\"worker\",\"minAvailable\":1}]",
						},
					},
				},
				Roles: []vkv1.TaskRole{
					{
						Replicas: uint(1),
						Name:     "ps",
						EventPolicies: []vkv1.EventPolicy{

						},
						CompletionPolicy: vkv1.CompletionPolicy{
							MinFailed:    1,
							MinSucceeded: 1,
						},
						RetryPolicy: vkv1.RetryPolicy{
							Retry:         true,
							MaxRetryCount: 1,
						},
						Pod: v1.PodTemplateSpec{
							Spec: v1.PodSpec{
								RestartPolicy: v1.RestartPolicyNever,
								Containers: []v1.Container{
									{
										Command: []string{
											"sh",
											"-c",
											"wget https://raw.githubusercontent.com/ruanxingbaozi/ml/master/mnist/ml-multi-small-test.py && " +
												"python ml-multi-small-test.py --backend nccl --init-method tcp://pytorchdistml-ps-0-0-0:23456 --world-size 2 --rank 0",
										},
										Image: defaultMLImage,
										Name:  "ps",
										Resources: v1.ResourceRequirements{
											Limits: v1.ResourceList{
												v1.ResourceCPU:    resource.MustParse("1"),
												v1.ResourceMemory: resource.MustParse("2Gi"),
												//NVIDIA_GPU_RESOURCE: resource.MustParse("1"),
											},
										},
									},
								},
							},
						},
					},
					{
						Replicas: uint(2),
						Name:     "worker",
						EventPolicies: []vkv1.EventPolicy{

						},
						Pod: v1.PodTemplateSpec{
							Spec: v1.PodSpec{
								RestartPolicy: v1.RestartPolicyNever,
								Containers: []v1.Container{
									{
										Command: []string{
											"sh",
											"-c",
											"wget https://raw.githubusercontent.com/ruanxingbaozi/ml/master/mnist/ml-multi-small-test.py && " +
												"python ml-multi-small-test.py --backend nccl --init-method tcp://pytorchdistml-ps-0-0-0:23456 --world-size 2 --rank 1",
										},
										Image: defaultMLImage,
										Name:  "worker",
										Resources: v1.ResourceRequirements{
											Limits: v1.ResourceList{
												v1.ResourceCPU:    resource.MustParse("1"),
												v1.ResourceMemory: resource.MustParse("2Gi"),
												//NVIDIA_GPU_RESOURCE: resource.MustParse("1"),
											},
										},
									},
								},
							},
						},
					},
				},
			},
		}

		created, err := context.tsclient.OctopusV1alpha1().TaskSets("test").Create(job)
		Expect(err).NotTo(HaveOccurred())
		defer saveTaskSet(context, created, OutputFilePath+created.Name+".yaml")

		err = waitJobStates(context, created, []TaskSetPhase{TaskSetAttemptPreparing, TaskSetAttemptRunning, TaskSetCompleted}, twoMinute)
		Expect(err).NotTo(HaveOccurred())
		// TODO ps/worker Event都为Event:  tc.EventRoleFailed, Action: tc.ActionTaskSetFailed或都为空时，直接跳到TaskSetCompleted
	})

})
