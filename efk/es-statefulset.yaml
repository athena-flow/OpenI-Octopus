# RBAC authn and auth
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
rules:
  - apiGroups:
      - ""
    resources:
      - "services"
      - "namespaces"
      - "endpoints"
    verbs:
      - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: kube-system
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
  - kind: ServiceAccount
    name: elasticsearch-logging
    namespace: kube-system
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: elasticsearch-logging
  apiGroup: ""
---
# Elasticsearch deployment itself
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: es-sf
  namespace: kube-system
  labels:
    k8s-app: es
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  serviceName: es
  replicas: 2
  selector:
    matchLabels:
      k8s-app: es
  template:
    metadata:
      labels:
        k8s-app: es
    spec:
      serviceAccountName: elasticsearch-logging
      nodeSelector:
        openinode: "worker"
      containers:
        - image: elastic/elasticsearch:7.1.0
          name: elasticsearch-logging
          securityContext:
            runAsUser: 1000
            runAsGroup: 0
          resources:
            # need more cpu upon initialization, therefore burstable class
            limits:
              cpu: 4000m
              memory: 12Gi
            requests:
              cpu: 4000m
              memory: 12Gi
          ports:
            - containerPort: 9200
              name: db
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: elasticsearch-logging
              mountPath: /data
            - name: esdata
              mountPath: /usr/share/elasticsearch/data
          env:
            - name: "cluster.name"
              value: "es-cluster"
            - name: "node.name"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: "discovery.seed_hosts"
              value: "es-sf-0.es.kube-system,es-sf-1.es.kube-system"
            - name: "cluster.initial_master_nodes"
              value: "es-sf-0,es-sf-1"
            - name: "network.host"
              value: "0.0.0.0"
            - name: "http.cors.enabled"
              value: "true"
            - name: "http.cors.allow-origin"
              value: "/.*/"
            - name: "ES_JAVA_OPTS"
              value: "-Xms10g -Xmx10g"
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      volumes:
        - name: elasticsearch-logging
          emptyDir: {}
        - name: esdata
          hostPath:
            path: /usr/share/elasticsearch
            type: DirectoryOrCreate
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
        - image: alpine:3.6
          command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
          name: elasticsearch-logging-init
          securityContext:
            privileged: true
---
apiVersion: v1
kind: Service
metadata:
  name: es
  namespace: kube-system
  labels:
    k8s-app: es
spec:
  clusterIP: None
  ports:
    - name: es-db
      port: 9200
      protocol: TCP
      targetPort: db
    - name: es-cluster
      port: 9300
      protocol: TCP
      targetPort: transport
  selector:
    k8s-app: es
